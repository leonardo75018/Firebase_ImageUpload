[{"/Users/leonardinho-dev/Desktop/image/image/src/index.js":"1","/Users/leonardinho-dev/Desktop/image/image/src/App.js":"2","/Users/leonardinho-dev/Desktop/image/image/src/firebase.js":"3","/Users/leonardinho-dev/Desktop/image/image/src/components/Nav.jsx":"4","/Users/leonardinho-dev/Desktop/image/image/src/components/Formations.jsx":"5","/Users/leonardinho-dev/Desktop/image/image/src/components/Login.jsx":"6","/Users/leonardinho-dev/Desktop/image/image/src/components/Equipe.jsx":"7","/Users/leonardinho-dev/Desktop/image/image/src/components/Partenaires.jsx":"8","/Users/leonardinho-dev/Desktop/image/image/src/components/Benevoles.jsx":"9"},{"size":220,"mtime":1609750944767,"results":"10","hashOfConfig":"11"},{"size":1195,"mtime":1610236012248,"results":"12","hashOfConfig":"11"},{"size":574,"mtime":1609691261315,"results":"13","hashOfConfig":"11"},{"size":1644,"mtime":1610236053934,"results":"14","hashOfConfig":"11"},{"size":20659,"mtime":1609959670027,"results":"15","hashOfConfig":"11"},{"size":4391,"mtime":1609689970089,"results":"16","hashOfConfig":"11"},{"size":10876,"mtime":1610239533767,"results":"17","hashOfConfig":"11"},{"size":7382,"mtime":1610035848855,"results":"18","hashOfConfig":"11"},{"size":9949,"mtime":1610242056745,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"l6yeq4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/leonardinho-dev/Desktop/image/image/src/index.js",[],["42","43"],"/Users/leonardinho-dev/Desktop/image/image/src/App.js",["44","45"],"/Users/leonardinho-dev/Desktop/image/image/src/firebase.js",[],"/Users/leonardinho-dev/Desktop/image/image/src/components/Nav.jsx",["46"],"/Users/leonardinho-dev/Desktop/image/image/src/components/Formations.jsx",["47","48","49","50","51","52","53"],"import React, { useState, useEffect } from \"react\"\nimport { db, auth, firebase } from \"../firebase\"\nimport { withRouter } from \"react-router-dom\";\nimport \"../App.css\"\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { useForm } from 'react-hook-form'\n\n\n\nconst Formations = (props) => {\n\n    const { register, errors, handleSubmit } = useForm();\n\n    React.useEffect(() => {\n        if (auth.currentUser) {\n            // console.log(\"connectÃ©\")\n        } else {\n            console.log(\"aucun\")\n            props.history.push(\"/login\")\n        }\n\n    }, [props.history])\n\n    const [fileUrl, setFileUrl] = useState(null)\n    const [formations, setFormations] = useState([])\n    const [igmEdit, setImgEdit] = useState([])\n    const [idImgEdit, setIdImgEdit] = useState(\"\")\n    const [modeEdit, setModeEdit] = useState(false)\n    const [oneFormation, setOneFormation] = useState(\"\")\n\n\n\n    //For modal \n    const {\n        buttonLabel,\n        className\n    } = props;\n\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n\n\n\n\n\n    const fetchFormations = async () => {\n        const data = await db.collection(\"formations\").get()\n        const arrayData = await data.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n        setFormations(arrayData)\n    }\n\n\n    useEffect(() => {\n        fetchFormations()\n    }, [])\n\n\n\n\n    const onFileChange = async (e) => {\n        const file = e.target.files[0]\n        const storageRef = firebase.storage().ref()\n        const fileRef = storageRef.child(file.name)\n        await fileRef.put(file)\n        setFileUrl(await fileRef.getDownloadURL())\n    }\n\n\n\n    const createFormation = async (e) => {\n        e.preventDefault()\n        const formationName = e.target.formationName.value\n        const debutFormation = e.target.debut.value\n        const finFormation = e.target.fin.value\n        const diplome = e.target.diplome.value\n        const descriptionMetier = e.target.description.value\n        const savoirFaire = e.target.savoirFaire.value\n        const prerequis = e.target.prerequis.value\n\n        if (!formationName.trim()) {\n            console.log(\"formation\")\n            return\n        }\n\n        if (!debutFormation.trim()) {\n            console.log(\"debutFormation\")\n            return\n        }\n        if (!finFormation.trim()) {\n            console.log(\"findFormation\")\n            return\n        }\n\n\n        if (!diplome.trim()) {\n            console.log(\"Diplome\")\n            return\n        }\n\n\n        if (!descriptionMetier.trim()) {\n            console.log(\"description\")\n            return\n        }\n\n        if (!savoirFaire.trim()) {\n            console.log(\"savoirFaire\")\n            return\n        }\n        if (!prerequis.trim()) {\n            console.log(\"prerequis\")\n            return\n        }\n\n        try {\n            const newFormation = {\n                nom: formationName,\n                debut: debutFormation,\n                find: finFormation,\n                diplome: diplome,\n                descriptionMetier: descriptionMetier,\n                savoirFaire: savoirFaire,\n                prerequis: prerequis,\n                backdrop: fileUrl\n            }\n            const data = await db.collection(\"formations\").add(newFormation)\n            setFormations([\n                ...formations,\n                { ...newFormation, id: data.id }\n            ])\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    const updateFormation = async (e) => {\n        e.preventDefault()\n        const formationName = e.target.formationName.value\n        const debutFormation = e.target.debut.value\n        const finFormation = e.target.fin.value\n        const diplome = e.target.diplome.value\n        const descriptionMetier = e.target.description.value\n        const savoirFaire = e.target.savoirFaire.value\n        const prerequis = e.target.prerequis.value\n\n\n        if (!formationName.trim()) {\n            console.log(\"formation\")\n            return\n        }\n\n        if (!debutFormation.trim()) {\n            console.log(\"debutFormation\")\n            return\n        }\n        if (!finFormation.trim()) {\n            console.log(\"findFormation\")\n            return\n        }\n\n\n        if (!diplome.trim()) {\n            console.log(\"Diplome\")\n            return\n        }\n\n\n        if (!descriptionMetier.trim()) {\n            console.log(\"description\")\n            return\n        }\n\n        if (!savoirFaire.trim()) {\n            console.log(\"savoirFaire\")\n            return\n        }\n        if (!prerequis.trim()) {\n            console.log(\"prerequis\")\n            return\n        }\n\n\n        try {\n            const id = oneFormation.id\n            const res = await db.collection(\"formations\").doc(id).update({\n                nom: formationName,\n                debut: debutFormation,\n                find: finFormation,\n                diplome: diplome,\n                descriptionMetier: descriptionMetier,\n                savoirFaire: savoirFaire,\n                prerequis: prerequis,\n            })\n            fetchFormations()\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n\n\n\n    }\n\n\n\n\n\n    const deleteFormation = async (id) => {\n        await db.collection(\"formations\").doc(id).delete()\n        const arrayFilter = formations.filter(item => item.id !== id)\n        setFormations(arrayFilter)\n    }\n\n\n\n    const [error, setError] = useState(false)\n\n    const editImage = async (image) => {\n        const imageFormation = image.target.files[0]\n        try {\n            if (imageFormation === undefined) {\n                console.log(\"pas d'image selectionner\")\n                return\n            }\n\n            if (imageFormation.type === \"image/jpg\" || imageFormation.type === \"image/png\") {\n                const imageRef = await firebase.storage().ref().child(imageFormation.name)\n                await imageRef.put(imageFormation)\n                const newImageURL = await imageRef.getDownloadURL()\n\n                await db.collection(\"formations\").doc(idImgEdit).update({\n                    backdrop: newImageURL\n                })\n                fetchFormations()\n\n                setError(false)\n            } else {\n                setError(true)\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    const takeFormation = (formationId) => {\n        const takeFormation = formations.map(item => (\n            item.id === formationId ? setOneFormation(item) : \" \"\n\n        ), [])\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return (\n        <div className=\" mt-5  \" >\n            <div className=\"ajouter\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary \"\n                    onClick={() => { toggle(); setModeEdit(false) }} >\n                    Ajouter une formation\n            </button>\n            </div>\n\n\n            <Modal isOpen={modal} toggle={toggle} className={className}>\n                <ModalHeader>\n                    <div class=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">{\n                            modeEdit ? `Modification de la formation ${oneFormation.nom}` : \"CrÃ©ation d'une nouvelle formation  \"\n                        }</h5>\n\n\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={toggle} ></button>\n                    </div>\n\n\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"modal-body\">\n                        <form onSubmit={modeEdit ? updateFormation : createFormation}>\n\n                            {\n                                modeEdit ? <div></div> :\n                                    <div>\n                                        <label htmlFor=\"formFile\">Image page formation</label>\n                                        <input\n                                            id=\"formFile\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            onChange={onFileChange}\n                                            name=\"img\"\n                                            ref={\n                                                register({\n                                                    required: {\n                                                        value: true,\n                                                        message: \"ce champ est obligatoire\"\n                                                    }\n                                                })\n                                            }\n                                        >\n                                        </input>\n                                        <span className=\"text-danger text-small d-block mb-3\">\n                                            {errors?.img?.message}\n                                        </span>\n\n                                    </div>\n                            }\n\n\n\n                            <label htmlFor=\"\">Nom de la formation</label>\n                            <input\n                                className=\"form-control \"\n                                type=\"text\"\n                                name=\"formationName\"\n                                placeholder=\"nom de la formation\"\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                                defaultValue={modeEdit ? oneFormation.nom : \"\"}\n                            >\n                            </input>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.formationName?.message}\n                            </span>\n\n                            <label htmlFor=\"debut\">Date du dÃ©but de la formtion</label>\n                            <input\n                                className=\"form-control \"\n                                type=\"date\"\n                                id=\"debut\"\n                                name=\"debut\"\n                                defaultValue={modeEdit ? oneFormation.debut : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            >\n                            </input>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.debut?.message}\n                            </span>\n\n                            <label htmlFor=\"fin\">Date de fin de  formation</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"date\"\n                                id=\"find\"\n                                name=\"fin\"\n                                defaultValue={modeEdit ? oneFormation.find : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            >\n                            </input>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.fin?.message}\n                            </span>\n\n\n                            <label htmlFor=\"\">Diplome </label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                name=\"diplome\"\n                                placeholder=\"Ex: Diplome niveau 7 bac+2\"\n                                defaultValue={modeEdit ? oneFormation.diplome : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            >\n                            </input>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.diplome?.message}\n                            </span>\n\n                            <label htmlFor=\"exampleFormControlTextarea1\">Le descriptif du mÃ©tier (un paragraphe est attendu) </label>\n                            <textarea\n                                className=\"form-control \"\n                                id=\"exampleFormControlTextarea1\"\n                                rows=\"3\"\n                                name=\"description\"\n                                defaultValue={modeEdit ? oneFormation.descriptionMetier : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            >\n                            </textarea>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.description?.message}\n                            </span>\n\n                            <label htmlFor=\"exampleFormControlTextarea1\">Ce que vous saurez faire aprÃ¨s cette formation <br /> (Veuillez utiliser une ligne pour chaque compÃ©tence) </label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"exampleFormControlTextarea1\"\n                                rows=\"3\" name=\"savoirFaire\"\n                                placeholder=\"Ex: Concevoir un disign en site web avec HTML/CSS     Concevoir un site avec  Bootstrap, JQuery, React \"\n                                defaultValue={modeEdit ? oneFormation.savoirFaire : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            >\n                            </textarea>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.savoirFaire?.message}\n                            </span>\n\n\n                            <label htmlFor=\"exampleFormControlTextarea1\">Les prÃ©requis <br /> (Veuillez utiliser une ligne pour chaque  prÃ©requis) </label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"exampleFormControlTextarea1\"\n                                rows=\"3\" name=\"prerequis\"\n                                placeholder=\"Ex: Lire et Ã©crire en franÃ§ais                                       MaÃ®triser les bases de lâoutil informatique (saisie au clavier, navigation\"\n                                defaultValue={modeEdit ? oneFormation.prerequis : \"\"}\n                                ref={\n                                    register({\n                                        required: {\n                                            value: true,\n                                            message: \"ce champ est obligatoire\"\n                                        }\n                                    })\n                                }\n                            ></textarea>\n                            <span className=\"text-danger text-small d-block mb-3\">\n                                {errors?.prerequis?.message}\n                            </span>\n\n\n                            <div className=\"modal-footer\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary\"\n                                    data-bs-dismiss=\"modal\"\n                                    onClick={toggle}\n                                >\n                                    Annuler\n                                 </button>\n\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                >\n                                    {modeEdit ? \"Modifier cette formation\" : \"CrÃ©er cette formation\"}\n                                </button>\n\n                            </div>\n                        </form>\n                    </div>\n                </ModalBody>\n            </Modal>\n\n            <div className=\"content \">\n                {\n                    formations.map(item =>\n                        <div key={item.id}  >\n                            <div>\n                                <img src={item.backdrop} width=\"500px\" alt=\"image d'une formation en informatique\" /> <br />\n\n                                <h3>{item.nom}</h3>\n                                <h5>DÃ©but: {item.debut}------Find: {item.find}   </h5>\n                                <h5>Diplome : {item.diplome}  </h5>\n                                <h5>description du mÃ©tier : {item.descriptionMetier}  </h5>\n                                <h5>description du mÃ©tier : {item.descriptionMetier}  </h5>\n                                <h5>savoir faire {item.savoirFaire}   </h5>\n                                <h5>prerequis : {item.prerequis}   </h5>\n\n                                <button\n                                    className=\"btn btn-danger mt-2\"\n                                    onClick={() => deleteFormation(item.id)}\n                                >\n                                    Effacer\n                         </button>\n\n                                <button\n                                    className=\"btn btn-primary mt-2\"\n                                    onClick={() => { toggle(); setModeEdit(true); takeFormation(item.id) }}\n\n                                >\n                                    Modifier\n                         </button>\n\n                                {\n                                    error &&\n                                    <div className=\"alert alert-warning mt-2\">seul les archives pgn ou jpg sont acceptÃ©s </div>\n                                }\n                                <div className=\"custom-file\">\n                                    <input\n                                        type=\"file\"\n                                        className=\"custom-file-input\"\n                                        id={\"inputGroupFile01\" + item.id}\n                                        style={{ display: 'none' }}\n                                        onChange={e => editImage(e)}\n                                        onClick={() => setIdImgEdit(item.id)}\n                                    />\n\n                                    <label\n                                        className=\"btn btn-dark mt-2\"\n                                        htmlFor={\"inputGroupFile01\" + item.id}\n                                    >\n                                        changer l'image\n                             </label>\n                                </div>\n                            </div>\n                        </div>)\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default withRouter(Formations) \n","/Users/leonardinho-dev/Desktop/image/image/src/components/Login.jsx",["54"],"import React, { useState } from 'react'\nimport { auth, db } from \"../firebase\"\nimport { withRouter } from \"react-router-dom\";\n\n\nconst Login = (props) => {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [error, setError] = useState(null)\n    const [isRegister, setIsRegister] = useState(true)\n\n\n    const dataProcess = e => {\n        e.preventDefault()\n        if (!email.trim()) {\n            setError(\"champ email vide\")\n            return\n        }\n\n        if (!password.trim()) {\n            setError(\"champ password vide\")\n            return\n        }\n        if (password.length < 6) {\n            setError(\"Votre password doit contenir minimum 6 caractÃ¨res\")\n            return\n        }\n        setError(null)\n        if (isRegister) {\n            register()\n        } else {\n            login()\n        }\n    }\n\n    const register = React.useCallback(async () => {\n        try {\n            const res = await auth.createUserWithEmailAndPassword(email, password)\n            console.log(res.user)\n            await db.collection(\"users\").doc(res.user.email).set({\n                email: res.user.email,\n                uid: res.user.uid\n            })\n            setEmail(\"\")\n            setPassword(\"\")\n            setError(null)\n\n        } catch (error) {\n            console.log(error)\n            if (error.code === \"auth/invalid-email\") {\n                setError(\"Veuillez utiliser une addresee email valide\")\n            }\n            if (error.code === \"auth/email-already-in-use\") {\n                setError(\"Cette adresse email est dÃ©jÃ  utilisÃ©\")\n            }\n\n\n        }\n    }, [email, password])\n\n    const login = React.useCallback(async () => {\n        try {\n            const res = await auth.signInWithEmailAndPassword(email, password)\n            props.history.push(\"/formations\")\n\n\n        } catch (error) {\n            if (error.code === \"auth/user-not-found\") {\n                setError(\"Ce compte utilisateur n'existe pas\")\n            }\n            if (error.code === \"auth/wrong-password\") {\n                setError(\"Mot de passe incorrect\")\n            }\n\n            console.log(error)\n        }\n\n    }, [email, password, props.history])\n\n\n\n\n    return (\n        <div className=\"mt-5\">\n            <h3 className=\"text-center\">{\n                isRegister ? \"CrÃ©ation de compte\" : \"Connectez-vous\"\n            }</h3>\n            <hr />\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-sm-8 col-md-6 col-xl-4\">\n                    {\n                        error && (\n                            <div className=\"alert alert-danger\">{error}</div>\n                        )\n                    }\n                    <form onSubmit={dataProcess}>\n                        <input\n                            type=\"email\"\n                            className=\"form-control mb-2\"\n                            placeholder=\"Votre Email\"\n                            onChange={e => setEmail(e.target.value)}\n                            value={email}\n\n                        />\n                        <input\n                            type=\"password\"\n                            className=\"form-control mb-2\"\n                            placeholder=\"Votre password\"\n                            onChange={e => setPassword(e.target.value)}\n                            value={password}\n\n                        />\n                        <button\n                            className=\"btn btn-lg btn-dark btn-block\"\n                            type=\"submit\"\n                        >\n                            {\n                                isRegister ? \"CrÃ©er mon compte\" : \"Connexion\"\n                            }\n                        </button>\n                        <br />\n                        <button\n                            className=\"btn btn-sm btn-info btn-block\"\n                            type=\"button\"\n                            onClick={() => setIsRegister(!isRegister)}\n                        >\n                            {\n                                isRegister ? \"Â¿Vous avez dÃ©jÃ  un compte?\" : \"Vous n'avez pas de compte\"\n                            }\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(Login) \n","/Users/leonardinho-dev/Desktop/image/image/src/components/Equipe.jsx",["55","56","57","58"],"/Users/leonardinho-dev/Desktop/image/image/src/components/Partenaires.jsx",["59","60"],"import React, { useState, useEffect } from \"react\"\nimport { db, auth, firebase } from \"../firebase\"\nimport { withRouter } from \"react-router-dom\";\nimport \"../App.css\"\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\n\n\nconst Partenaires = (props) => {\n\n    React.useEffect(() => {\n        if (auth.currentUser) {\n            // console.log(\"connectÃ©\")\n        } else {\n            console.log(\"aucun\")\n            props.history.push(\"/login\")\n        }\n\n    }, [props.history])\n\n    //For modal \n    const {\n        buttonLabel,\n        className\n    } = props;\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [fileUrl, setFileUrl] = useState(null)\n    const [partenaires, setPartenaires] = useState([]);\n    const [idPhotoEdit, setIdPhotoEdit] = useState(\"\")\n\n\n    const fetchPartenaires = async () => {\n        const data = await db.collection(\"partenaires\").orderBy(\"create\").get()\n        const partenaires = await data.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n        setPartenaires(partenaires)\n    }\n\n\n    useEffect(() => {\n        fetchPartenaires()\n    }, [])\n\n    const onFileChange = async (e) => {\n        const file = e.target.files[0]\n        const storageRef = firebase.storage().ref()\n        const fileRef = storageRef.child(file.name)\n        await fileRef.put(file)\n        setFileUrl(await fileRef.getDownloadURL())\n    }\n\n    const createPartenaire = async (e) => {\n        e.preventDefault()\n        const parteNaireName = e.target.partenaireName.value\n\n        if (!parteNaireName.trim()) {\n            console.log(\"il faut ajouter le nom du partenaire\")\n        }\n\n        try {\n            const newPartenaire = {\n                nom: parteNaireName,\n                create: Date.now(),\n                photo: fileUrl\n            }\n\n            fetchPartenaires()\n\n            const data = await db.collection(\"partenaires\").add(newPartenaire)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const deletePartenaires = async (idPatenaire) => {\n        await db.collection(\"partenaires\").doc(idPatenaire).delete()\n        fetchPartenaires()\n    }\n\n    const imageUpadate = async (image) => {\n        const partenairePhoto = image.target.files[0]\n        try {\n            if (partenaires === undefined) {\n                console.log(\"pas d'image selectionner\")\n                return\n            }\n\n            // if (newImageProfile.type === \"image/jpg\" || newImageProfile.type === \"image/png\") {\n            const imageRef = await firebase.storage().ref().child(partenairePhoto.name)\n            await imageRef.put(partenairePhoto)\n            const newPhotoURL = await imageRef.getDownloadURL()\n            console.log(newPhotoURL)\n\n            await db.collection(\"partenaires\").doc(idPhotoEdit).update({\n                photo: newPhotoURL\n            })\n            fetchPartenaires()\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n\n\n\n\n    return (\n        <div>\n            <div className=\"ajouter-contente\">\n                <div className=\"ajouter\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary \"\n                        onClick={() => {\n                            toggle();\n\n                        }}\n                    >\n                        Ajouter un Partenaire\n                    </button>\n                </div>\n            </div>\n\n            <Modal isOpen={modal} toggle={toggle} className={className}>\n                <ModalHeader>\n                    <div className=\"modal-header\">\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={toggle} ></button>\n                    </div>\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"modal-body\">\n                        <form onSubmit={createPartenaire}>\n\n                            <div className=\"mb-4\">\n                                <label htmlFor=\"formFile\">Logo du partenaire</label>\n                                <input\n                                    id=\"formFile\"\n                                    className=\"form-control\"\n                                    type=\"file\"\n                                    name=\"img\"\n                                    onChange={onFileChange}\n                                >\n                                </input>\n                            </div>\n\n                            <label htmlFor=\"debut\">Nom du partenaire</label>\n                            <input\n                                className=\"form-control mb-4 \"\n                                type=\"text\"\n                                name=\"partenaireName\"\n                                placeholder=\"nom du partenaire\"\n                            ></input>\n\n                            <div className=\"modal-footer\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary\"\n                                    data-bs-dismiss=\"modal\"\n                                    onClick={toggle}\n                                >\n                                    Annuler\n                                 </button>\n\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                >\n                                    Ajouter\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </ModalBody>\n            </Modal>\n\n            <div className=\"container-profile\">\n                {\n                    partenaires.map(item => (\n\n                        <div key={item.id} className=\"profile-box\">\n                            <img src={item.photo} alt=\"...\" width=\"200px\" class=\"rounded-circle\"></img>\n                            <p>{item.nom}</p>\n\n                            <div className=\"custom-file\">\n                                <input\n                                    type=\"file\"\n                                    className=\"custom-file-input\"\n                                    id={\"inputGroupFile01\" + item.id}\n                                    style={{ display: 'none' }}\n                                    onChange={e => imageUpadate(e)}\n                                    onClick={() => setIdPhotoEdit(item.id)}\n                                />\n\n                                <label\n                                    className=\"btn btn-dark mt-2\"\n                                    htmlFor={\"inputGroupFile01\" + item.id}\n                                >\n                                    changer l'image\n                             </label>\n                            </div>\n\n                            <button\n                                className=\"btn btn-danger mt-2\"\n                                onClick={() => deletePartenaires(item.id)}\n                            >\n                                Effacer\n                         </button>\n                        </div>\n                    ))\n                }  </div>\n        </div>\n    )\n}\n\nexport default withRouter(Partenaires)","/Users/leonardinho-dev/Desktop/image/image/src/components/Benevoles.jsx",["61","62","63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":36},{"ruleId":"69","severity":1,"message":"73","line":2,"column":35,"nodeType":"71","messageId":"72","endLine":2,"endColumn":41},{"ruleId":"69","severity":1,"message":"74","line":2,"column":16,"nodeType":"71","messageId":"72","endLine":2,"endColumn":23},{"ruleId":"69","severity":1,"message":"75","line":12,"column":31,"nodeType":"71","messageId":"72","endLine":12,"endColumn":43},{"ruleId":"69","severity":1,"message":"76","line":26,"column":12,"nodeType":"71","messageId":"72","endLine":26,"endColumn":19},{"ruleId":"69","severity":1,"message":"77","line":26,"column":21,"nodeType":"71","messageId":"72","endLine":26,"endColumn":31},{"ruleId":"69","severity":1,"message":"78","line":35,"column":9,"nodeType":"71","messageId":"72","endLine":35,"endColumn":20},{"ruleId":"69","severity":1,"message":"79","line":187,"column":19,"nodeType":"71","messageId":"72","endLine":187,"endColumn":22},{"ruleId":"69","severity":1,"message":"80","line":252,"column":15,"nodeType":"71","messageId":"72","endLine":252,"endColumn":28},{"ruleId":"81","severity":1,"message":"82","line":506,"column":33,"nodeType":"83","endLine":506,"endColumn":118},{"ruleId":"69","severity":1,"message":"79","line":63,"column":19,"nodeType":"71","messageId":"72","endLine":63,"endColumn":22},{"ruleId":"69","severity":1,"message":"78","line":24,"column":9,"nodeType":"71","messageId":"72","endLine":24,"endColumn":20},{"ruleId":"69","severity":1,"message":"84","line":85,"column":19,"nodeType":"71","messageId":"72","endLine":85,"endColumn":23},{"ruleId":"69","severity":1,"message":"79","line":112,"column":19,"nodeType":"71","messageId":"72","endLine":112,"endColumn":22},{"ruleId":"69","severity":1,"message":"85","line":162,"column":15,"nodeType":"71","messageId":"72","endLine":162,"endColumn":24},{"ruleId":"69","severity":1,"message":"78","line":23,"column":9,"nodeType":"71","messageId":"72","endLine":23,"endColumn":20},{"ruleId":"69","severity":1,"message":"84","line":69,"column":19,"nodeType":"71","messageId":"72","endLine":69,"endColumn":23},{"ruleId":"69","severity":1,"message":"78","line":22,"column":9,"nodeType":"71","messageId":"72","endLine":22,"endColumn":20},{"ruleId":"69","severity":1,"message":"84","line":66,"column":19,"nodeType":"71","messageId":"72","endLine":66,"endColumn":23},{"ruleId":"69","severity":1,"message":"79","line":89,"column":19,"nodeType":"71","messageId":"72","endLine":89,"endColumn":22},{"ruleId":"69","severity":1,"message":"86","line":102,"column":15,"nodeType":"71","messageId":"72","endLine":102,"endColumn":26},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'NavLink' is defined but never used.","'handleSubmit' is assigned a value but never used.","'igmEdit' is assigned a value but never used.","'setImgEdit' is assigned a value but never used.","'buttonLabel' is assigned a value but never used.","'res' is assigned a value but never used.","'takeFormation' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'data' is assigned a value but never used.","'oneMember' is assigned a value but never used.","'oneBenevole' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]